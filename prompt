#!/bin/bash
autoload -Uz vcs_info

# OS symbol
_os_symbol() {
   # Root
   if [[ $EUID == 0 ]] ; then
      echo -n ""
   else
      case "$(uname)" in
         "Linux")
            if [ $(grep "Gentoo" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Arch" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Debian" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Slackware" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Ubuntu" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Mint" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "suse" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "RHEL" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Fedora" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "CentOS" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Elementary" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "NixOS" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Manjaro" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Alpine" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Devuan" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Mageia" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Sabayon" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            elif [ $(grep "Raspbian" /etc/*-release | wc -l) -gt "0" ]
            then
               echo -n ""
            else
               # Distro cant be determined
               echo -n "" 
            fi
            ;;
         "FreeBSD")
            echo -n ""
            ;;
         "Darwin")
            echo -n ""
            ;;
         "WindowsNT")
            echo -n ""
      esac
   fi
}


   _abbrev_path () {
      color1=$1
      color2=$2
      pathh=$(pwd | sed "s;$HOME;~;")
      p0=""
      p1=""
      p2=""
      result=""
      first_char="${pathh:0:1}"
      if [ "$first_char" = "/" ]; then
         result="/"
      fi

      for i in $(echo $pathh | tr "/" "\n"); do
         # echo "color1: $color1, color2: $color2, result: $result, 0: $p0, p1: $p1, p2: $p2, i: $i"
         if [ -z "$p0" ]; then
            p0="$i"
         else
            if [ ! -z "$p2" ]; then
               p1="${p1}%F{$color2}${p2:0:1}%F{$color1}/"
            else
               p0="$p0/"
            fi
            p2="$i"
         fi
      done
      echo "%F{$color1}$result$p0$p1$p2"
   }

   parse_git_dirty() {
      STATUS="$(git status 2> /dev/null)"
      if [[ $? -ne 0 ]]; then printf ""; return; fi
      dirt=""
      if echo "$STATUS" | grep -c "renamed:" &> /dev/null; then dirt="${dirt}>"; else printf ""; fi
      if echo "$STATUS" | grep -c "branch is ahead:" &> /dev/null; then dirt="${dirt}!"; else printf ""; fi
      if echo "$STATUS" | grep -c "new file:" &> /dev/null; then dirt="${dirt}+"; else printf ""; fi
      if echo "$STATUS" | grep -c "Untracked files:" &> /dev/null; then dirt="${dirt}?"; else printf ""; fi
      if echo "$STATUS" | grep -c "modified:" &> /dev/null; then dirt="${dirt}*"; else printf ""; fi
      if echo "$STATUS" | grep -c "deleted:" &> /dev/null; then dirt="${dirt}✘"; else printf ""; fi
      if [ ! -z "$dirt" ]; then
         echo " $dirt"
      fi
   }

   parse_git_branch() {
      # Long form
      # git rev-parse --abbrev-ref HEAD 2> /dev/null
      # Short form
      branch_icon_1=""
      branch_icon_2=""
      branch_info="$(git rev-parse --abbrev-ref HEAD 2> /dev/null | sed -e 's/.*\/\(.*\)/\1/')"
      if [ ! -z "$branch_info" ]; then
         echo "$branch_icon2 $branch_info"
      fi
   }

# zstyle ':vcs_info:*' actionformats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
# zstyle ':vcs_info:*' formats       '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
# zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
# precmd () { vcs_info }
# PROMPT='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_}%f%# '
# Folders:    
# Chevron:󰅂⟫❭
# User part:%F{7}%n@%m 
# abp="$(_abbrev_path 38 7)"
PROMPT='%F{15}$(_os_symbol) %b%F{38} $(_abbrev_path 38 7)%F{41}$(parse_git_branch)%F{221}$(parse_git_dirty)%F{41} %B❭%b%F{015} '
# PROMPT=
# RPROMPT=''
# colors=""
# for n in {0..255}; do
#     colors="${colors}%F{$n}██$n"
# done
# PROMPT='%B$colors%b$colors'
# RPROMPT='%F{006}$(parse_git_branch)%F{003}$(parse_git_dirty)'
